@using GameServerManager.Services.Helpers
@using GameServerManager.Models.Options
@using GameServerManager.Models.Request
@using Blazored.FluentValidation

@inject ApplicationSettingsService _asr
@inject GameServerService _gss
@inject SteamCMDService _scs

<div class="rz-p-4 rz-text-align-center">
    <RadzenSelectBar @bind-Value="isExistingServer" Change="ServerLocChanged" TValue="bool" class="mb-5">
        <Items>
            <RadzenSelectBarItem Text="New" Value="false" />
            <RadzenSelectBarItem Text="Existing" Value="true" />
        </Items>
    </RadzenSelectBar>
</div>
<div class="input-group">
    <div class="input-group-prepend" style="width: 150px">
        <span class="input-group-text">Server Type</span>
    </div>
    <RadzenDropDown class="form-control" id="serverType" @bind-Value=@selectedType Change="ServerTypeChanged" Data=@games>
        <Template>
            @((context as Tuple<string, int>).Item1)
        </Template>
        <ValueTemplate>
            @((context as Tuple<string, int>).Item1)
        </ValueTemplate>
    </RadzenDropDown>
</div>

@if (selectedType != null && isExistingServer == false)
{
    <RadzenStack class="mt-2">
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenLabel Text="Private Server"/>
            <RadzenSwitch class="mt-1" @bind-Value="@addServer._IsPrivateServer"/>
        </RadzenStack>
        
        <EditForm Model="@addServer" OnValidSubmit="OnHandleValidSubmit">
            <FluentValidationValidator DisableAssemblyScanning="@true"/>

            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" style="width: 150px">Server Name</span>
                </div>
                <InputText class="form-control" @bind-Value="addServer.ServerName" />
            </div>

            <div class="input-group mb-3">
                <div class="input-group-prepend" style="width: 150px">
                    <span class="input-group-text">Max Players</span>
                </div>
                 <InputNumber class="form-control" @bind-Value="addServer.MaxPlayers" />
            </div>

            <div class="input-group mb-3">
                <div class="input-group-prepend" style="width: 150px">
                    <span class="input-group-text" >Port</span>
                </div>
                    <InputNumber class="form-control" @bind-Value="addServer.Port" />
            </div>

            @if (selectedType.Item2 != (int)ServerTypeEnum.Arma_3)
            {
                <div class="input-group mb-3">
                    <div class="input-group-prepend" style="width: 150px">
                        <span class="input-group-text">Query Port</span>
                    </div>
                    <InputNumber class="form-control" @bind-Value="addServer.QueryPort" />
                </div>
            }

            @if (selectedType.Item2 == (int)ServerTypeEnum.Ground_Branch)
            {
                <div class="row">
                    <div class="col-sm-6">
                        <p class="mt-1 mb-2">Max Spectators</p>
                        <p class="mt-1 mb-2">Restart Time</p>
                        <p class="mt-1">Multi-Home</p>
                    </div>
                    <div class="col-sm-6">
                        <InputNumber class="mb-1" style="width: 100px" @bind-Value="_maxSpectators" />
                        <InputNumber class="mb-1" style="width: 100px" @bind-Value="_restartTime" />
                        <InputText class="mb-1" style="width: 150px" @bind-Value="_multiHome" />
                    </div>
                </div>
            }

            @if (selectedType.Item2 == (int)ServerTypeEnum.Arma_3)
            {
                <div class="input-group mb-3">
                    <div class="input-group-prepend" style="width: 150px">
                        <span class="input-group-text">Admin Password</span>
                    </div>
                    <InputText class="form-control" @bind-Value="_adminPassword" />                       
                </div>
                <div class="input-group mb-3">
                    <div class="input-group-prepend" style="width: 150px">
                        <span class="input-group-text">World</span>
                    </div>
                        <InputText class="form-control" @bind-Value="_serverWorld" />                        
                </div>
            }

            @if (addServer._IsPrivateServer)
            {
                <div class="input-group mb-3">
                    <div class="input-group-prepend" style="width: 150px">
                        <span class="input-group-text">Server Password</span>
                    </div>
                    <InputText class="form-control" @bind-Value="addServer.ServerPassword" />
                </div>

                @if (selectedType.Item2 == (int)ServerTypeEnum.Ground_Branch)
                {
                    <div class="input-group mb-3">
                        <div class="input-group-prepend" style="width: 150px">
                            <span class="input-group-text">Spectator Only Password</span>
                        </div>
                        <InputText class="form-control" @bind-Value="_spectatorPassword" />
                </div>
                }

            }

            @if (selectedType.Item2 == (int)ServerTypeEnum.Arma_3)
            {
                <div class="row">
                    <div class="border border-primary rounded">
                        <span class="text-primary fs-5">Steam Credentials</span>
                        <div class="input-group mb-3">
                            <div Class="input-group-prepend" style="width: 150px">
                                <span class="input-group-text">Username</span>
                            </div>                            
                            <InputText class="form-control" style="" @bind-Value="_steamUser" />
                        </div>
                        <div class="input-group mb-3 flex-nowrap">
                            <div Class="input-group-prepend" >
                                <span class="input-group-text">Password</span>     
                                <div class="input-group-text">
                                    <button class="btn btn-outline-secondary" type="button">S</button>
                                </div>
                            </div>
                            <InputText type="password" class="form-control" @bind-Value="_steamPass" />
                        </div>
                        <div class="input-group mb-3">
                            <div class="input-group-prepend" style="width: 150px">
                                <span class="input-group-text">Steam Guard Key</span>
                            </div>
                            <InputText class="form-control" @bind-Value="_steam2FA" />
                        </div>
                    </div>
                </div>
            }

            <div class="mt-2 d-flex justify-content-end">
                <button type="submit" class="btn btn-sm btn-rounded btn-primary me-1">Add</button>
                <button type="button" class="btn btn-sm btn-rounded btn-secondary" @onclick="(_ => _ds.CloseSide())">Cancel</button>
            </div>
            <ValidationSummary /> 
        </EditForm>
    </RadzenStack>

    @if(addDisabled)
    {
        <span class="badge bg-warning" style="color: black;">Default path not set, please go to <RadzenLink Path="settings" Text="settings"/> and set.</span>
    }
}

@if (isExistingServer == true)
{
    <div class="form-group">
        <label for="path">Server path</label>
        <input type="text" class="form-control" id="path" @bind-value="serverPath" />
    </div>
    @if (showExeBanner)
    {
        <span class="badge bg-info text-wrap mt-2" style="color: black">@exeBannerText</span>        
    }
    
    <div class="mt-2 d-flex justify-content-end">
        <button type="button" class="btn btn-sm btn-rounded btn-primary me-1" disabled="@addDisabled" @onclick="AddExistingServer">Add</button>
        <button type="button" class="btn btn-sm btn-rounded btn-secondary" @onclick="(_ => _ds.CloseSide())">Cancel</button>
    </div>
}



@if (showError)
{
    <span class="badge bg-danger text-wrap">@errorText</span>    
}

@code {
    [Inject] DialogService _ds { get; set; }
    GameServer addServer = new ();
    List<Tuple<string, int>> games;
    private Tuple<string, int> selectedType;
    private string serverPath = "";
    private bool isExistingServer = false;
    private bool pathIsValid = true;
    private bool addDisabled = false;
    private bool rootPathSet = true;
    private bool showExeBanner = false;
    private bool showError = false;
    private string exeBannerText = "";
    private string errorText = "";

    private int _maxSpectators = 0;
    private int _restartTime = 12;
    private string _multiHome = "0.0.0.0";
    private string _spectatorPassword = string.Empty;
    private string _serverWorld = "empty";
    private string _adminPassword = string.Empty;

    private string _steamUser = string.Empty;
    private string _steamPass = string.Empty;
    private string _steam2FA = string.Empty;


    protected override void OnInitialized()
    {
        games = new List<Tuple<string, int>>();
        games = GetGamesList();

        rootPathSet = _asr.CheckServerPathSet();
        addDisabled = rootPathSet ? false : true;
    }

    private void ServerLocChanged()
    {
        addDisabled = rootPathSet == true ? false : isExistingServer == true && addDisabled == true ? false : true;
        //selectedType = null;
        games = GetGamesList(isExistingServer);
        StateHasChanged();
    }

    private void ServerTypeChanged()
    {
        switch (selectedType.Item2)
        {
            case 0:
                addServer = new GBServer();
                var ports = _gss.GetServerPorts();
                addServer.Port = ports.Item1;
                addServer.QueryPort = ports.Item2;
                addServer.ServerType = ServerTypeEnum.Ground_Branch;
                if (isExistingServer == true)
                {
                    showExeBanner = true;
                    exeBannerText = "Please enter the path to the GroundBranchServer.exe or GroundBranchServer-Win64-Shipping.exe";
                }
                break;
            case 1:
                addServer = new OHDServer();
                break;
            case 3:
                addServer = new ArmaServer();
                addServer.ServerType = ServerTypeEnum.Arma_3;
                (addServer as ArmaServer).ServerWorld = "empty";
                break;
        }
    }

    private void AddExistingServer()
    {
        if (isExistingServer && !string.IsNullOrWhiteSpace(serverPath))
        {
            try
            {
                _gss.AddExistingGameServer(serverPath, (ServerTypeEnum)selectedType.Item2);
                StateHasChanged();
                _ds.CloseSide();
            }
            catch (Exception e)
            {
                showError = true;
                errorText = e.Message;
            }
        }
    }

    private async void AddNewServer()
    {        
        var serverBaseDir = _asr.GetApplicationSettings().Settings.Where(s => s.Key == GlobalConstants.ServerBasePath && !string.IsNullOrWhiteSpace(s.Value)).First().Value;
        GameServer serv = new();
        CredentialRequest? cred = null;

        switch (selectedType.Item2)
        {
            case 0:
                var gbsrv = addServer as GBServer;
                gbsrv.MaxSpectators = _maxSpectators;
                gbsrv.RestartTime = _restartTime;
                gbsrv.MultiHome = _multiHome;
                gbsrv.SpectatorOnlyPassword = _spectatorPassword;
                addServer = gbsrv;
                break;
            case 3:
                var armasrv = addServer as ArmaServer;
                armasrv.ServerWorld = _serverWorld;
                addServer = armasrv;
                cred = new();
                cred.UserName = _steamUser;
                cred.Password = _steamPass;
                cred.TFA = _steam2FA;
                break;
        }

        _ds.CloseSide();
        addServer = _gss.SendSteamCMDAction(addServer, serverBaseDir, (ServerTypeEnum)selectedType.Item2, cred);
        
        //TODO: Disabled downloading for speedy testing
        // await _ds.OpenAsync<ProcessConsoleDialog>("Download Game Server",
        //     new Dictionary<string, object>()
        //         {
        //         { "ProcessActionName", "" },
        //         { "Proc", addServer.serverProc.proc },
        //         { "IsServerDownload", true }
        //         },
        //     new DialogOptions() { Height = "600px", Width = "700px", Resizable = false, Draggable = false, ShowClose = false });

        // _ds.Open("", ds => @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="rz-p-12"> <RadzenText TextStyle="TextStyle.H6">Setting up Server, please wait...</RadzenText></RadzenStack>
        //     , new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false }
        // );        

        await Task.Delay(1000);

        _gss.AddNewGameServer(addServer, (ServerTypeEnum)selectedType.Item2);        
        _ds.Close();
        _gss.UpdateGameServers();
    }


    private async void OnHandleValidSubmit()
    {
        if (!_scs.CheckSteamClientExists())
        {
            await _scs.DownloadSteamClient();
        }

        try
        {
            AddNewServer();            
        }
        catch (Exception)
        {
            errorText = "Failed to download server. (SteamCMD error)";
            showError = true;            
        }
    }

    private List<Tuple<string, int>> GetGamesList(bool existing = false)
    {        
        var list = new List<Tuple<string, int>>();
        foreach (var item in Enum.GetValues(typeof(ServerTypeEnum)))
        {
            if ((int)item == 3 && existing == true)
            {

            }
            else
            {
                list.Add(new Tuple<string, int>(Enum.GetName(typeof(ServerTypeEnum), item).Replace('_', ' '), (int)item));
            }
        }

        return list;
    }
}