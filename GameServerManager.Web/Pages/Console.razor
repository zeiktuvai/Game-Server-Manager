@page "/console"

@inject ProcessService _ps

<div style="height: 100vh; overflow: hidden; position:relative; margin-right: -24px; margin-top: -17.6px; margin-left: -32px">
    <MudDrawerContainer Class="mud-height-full">
        <MudDrawer @bind-Open="@open" Fixed="false" hidden="@hidePanel" Elevation="1" Variant="@DrawerVariant.Mini" OpenMiniOnHover="true" Anchor="Anchor.End" Style="background-color: var(--color-navbarlight); color: var(--color-offWhite)">
            <MudNavMenu>
                @foreach (var proc in procs)
                {
                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Storage" IconColor="Color.Surface">proc.d</MudNavLink>                    
                }
            </MudNavMenu>
        </MudDrawer>            

        <div class="d-flex mud-height-full" style="@(hidePanel == true ? "margin-right: -42px" : "")">
            <div style="border-radius: 5px; width: 100%; ">
                <div style="background: var(--color-offWhite); min-height: 55px;">
                    <h2 style="color: black;">@processName</h2>
                </div>
                <div style="background: black; height: 100%;  overflow: scroll;" class="p-1">
                    <span style="font-family: arial; color: white;">
                        @((MarkupString)selectedProc.processOutputString)
                    </span>
                </div>
            </div>
        </div>
    </MudDrawerContainer>
</div>

@code {
    private bool open = false;
    private bool hidePanel = false;
    public string processName = "Process Name";
    private List<RunningProcess> procs = new();
    private RunningProcess selectedProc = new() { processOutputString = "Nothing Running..." };

    protected override void OnInitialized()
    {
        procs = _ps.GetRunningProcesses();

        hidePanel = procs == null || procs.Count == 0 ? true : false;

        if (procs?.Count > 0)
        {
            selectedProc = procs[0];
            selectedProc.outputUpdated += () => InvokeAsync(() => StateHasChanged());
        }
    }
}
