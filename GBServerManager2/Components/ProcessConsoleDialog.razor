@using System.Diagnostics
@using System.Text

@inject IJSRuntime _js

<h3>@ProcessActionName</h3>
<div id="console" class="overflow-auto p-1" style="width: 650px; height: 455px; background: black; color: white; border-radius: 3px">
    @((MarkupString)output)
</div>

@code {
    [Inject] DialogService _ds { get; set; }
    [Parameter] public string ProcessActionName { get; set; }
    [Parameter] public Process Proc { get; set; }
    [Parameter] public bool IsServerDownload { get; set; } = false;
    private StringBuilder ProcOut = new();
    private string _output;
    private string output {
        get { return _output; } 
        set { 
            _output = value; 
            //TODO: why doesnt this work?
            _js.InvokeVoidAsync("scrollEnd", "console");
        } 
    }

    protected override void OnInitialized()
    {        
        if (IsServerDownload == true && Proc != null && Proc.StartInfo != null)
        {           
            var status = Proc.Start();

            if (status)
            {
                output = "Starting....";
                Proc.EnableRaisingEvents = true;
                Proc.OutputDataReceived += DownloadOutputRecieved;                
                Proc.Exited += Close;
                Proc.BeginOutputReadLine();
            }            
        }
        else
        {
            if (!Proc.HasExited)
            {
                Proc.OutputDataReceived += ServerOutputReceived;
            }
        }
    }

    private void DownloadOutputRecieved(object sendingProc, DataReceivedEventArgs e)
    {
        ProcOut.Append(FormatLine(e.Data));
        output = ProcOut.ToString();
        InvokeAsync(StateHasChanged);
        _js.InvokeVoidAsync("scrollEnd", "console");
    }

    private void ServerOutputReceived(object sendingProc, DataReceivedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
        _js.InvokeVoidAsync("scrollEnd", "console");
    }

    private string FormatLine(string inputText)
    {
        return "<span>" + inputText + "</span></br>";
    }

    private void Close(object? o, EventArgs e)
    {        
        _ds.Close();
    }
}

